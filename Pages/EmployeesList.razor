@page "/EmployeesList"
@using EmployeeBlazorCRUD.Data
@using EmployeeBlazorCRUD.Models
@inject EmployeeService employeesservice

<NavLink class="nav-link" href="AddEmployee">
    <span class="oi oi-plus" aria-hidden="true">Add New Employee</span>
</NavLink>

@if (EmpObj == null)
{
    <p><em>Loading.................</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true"
                    AllowSorting="false" PageSize="10" AllowPaging="true" ShowPagingSummary="true"
                    Data="@EmpObj" ColumnWidth="150px" TItem="Employee">
        <Columns>
            <RadzenDataGridColumn Title="Priority" Width="150px">
                <Template Context="employee">
                    <InputNumber Value="@employee.DisplayOrder"
                                 ValueExpression="(() => employee.DisplayOrder)"
                                 ValueChanged="@(async (int newPriority) => await HandlePriorityChange(employee, newPriority))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Width="150px" />
            <RadzenDataGridColumn TItem="Employee" Property="MiddleName" Title="Middle Name" Width="150px" />
            <RadzenDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="150px" />
            <RadzenDataGridColumn TItem="Employee" Property="Designation" Title="Designation" Width="150px" />
        </Columns>
    </RadzenDataGrid>

    <button @onclick="SaveOrder" class="btn btn-primary">Save Order</button>
}

@code {
    private List<Employee> EmpObj;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        EmpObj = await employeesservice.GetAllEmployeesOrdered();
    }

    private async Task HandlePriorityChange(Employee employee, int newPriority)
    {
        if (newPriority <= 0) return;

        var existingEmployeeWithPriority = EmpObj.FirstOrDefault(e => e.DisplayOrder == newPriority);

        if (existingEmployeeWithPriority != null)
        {
            await ShiftPriorities(newPriority);
        }

        employee.DisplayOrder = newPriority;
        ReorderEmployees();
        StateHasChanged();
    }

    private async Task ShiftPriorities(int newPriority)
    {
        var employeesToShift = EmpObj.Where(e => e.DisplayOrder >= newPriority).OrderBy(e => e.DisplayOrder).ToList();

        foreach (var employee in employeesToShift)
        {
            if (employee.DisplayOrder >= newPriority)
            {
                employee.DisplayOrder++;
            }
        }

        await Task.CompletedTask;
    }

    private void ReorderEmployees()
    {
        EmpObj = EmpObj.OrderBy(e => e.DisplayOrder).ToList();
    }

    private async Task SaveOrder()
    {
        var orderedEmployees = EmpObj.Where(e => e.DisplayOrder > 0).ToList();
        await employeesservice.UpdateEmployeeOrder(orderedEmployees);
        await LoadEmployees();
    }
}
